Query
  = ShortQuery / MediumQuery / FullQuery

ShortQuery
  = command:Command "(" table:Table ")" {
    return {
      type: "short",
      command: command,
      table: table
    }
  }

MediumQuery
  = table:Table "(" field:Field? ")" {
    var parts = table.split(".");
    return {
      type: "medium",
      table: parts.slice(0,-1).join("."),
      command: parts[parts.length-1],
      field: field
    }
  }

FullQuery
  = prefix:Prefix? tables:NamedTables fields:Fields? options:Options? filters:Filters? suffix:Suffix? {
  	return {
      type: "full",
      prefix: prefix,
      tables: tables,
      fields: fields,
      options: options,
      filters: (filters) ? (filters[0] || []) : [],
      suffix: suffix
    };
  }

Filters
  = "?" expressions:Expression+ {
    return expressions;
  }

Expression
  = head:Term tail:(OrOperator Term)* {
    if (tail.length) {
      return { operator : "|", operands: [head].concat(tail.map(function(x) { return x[1]; })) };
    } else {
      return head;
    }
  }

Term
  = head:Factor tail:(AndOperator Factor)* {
    if (tail.length) {
      return { operator : "&", operands: [head].concat(tail.map(function(x) { return x[1]; })) };
    } else {
      return head;
    }
  }

Factor
  = LeftParen expression:Expression RightParen { return expression; }
  / Statement

AndOperator
  = ("&" / "&&") { return text(); }

OrOperator
  = ("|" / "||") { return text(); }

LeftParen
  = "(" { return text(); }

RightParen
  = ")" { return text(); }

Options
  = head:"[" body:Statement+ tail:"]" {
    return body;
  }

Statement
  = key:Word predicate:(Predicate / Regex) {
    return {
      key: key,
      comparator: predicate.comparator,
      value: predicate.value
    }
  }

Predicate
 = comparator:Comparator value:("+" / "-" / "*" / String / Path / Number)+ ","? {
   return {
     value: value.join(""),
     comparator: comparator
   }
 }

Regex
  = TrueRegex / FakeRegex

FakeRegex
  = ("~") [\"']? value:([A-Za-z]* "*" [A-Za-z\*]*) [\"']? {
    return {
      value: "/" + (value[0].join("") + value[1] + value[2].join("")).replace(/\*+/g, ".*") + "/",
      comparator: "~"
    }
  }

TrueRegex
 = ("~" / "=") value:RegexExpression flags:([gim]*) {
   return {
     flags: flags.join(""),
     value: value,
     comparator: "~"
   }
}

RegexExpression
 = "/" ("\\\/" / [^/])+ "/" { return text() }

Comparator
 = ("=" / "<=" / "<" / ">=" / ">") { return text(); }

Fields
  = head:"{" body:Field+ tail:"}" {
  	return body;
  }

Field
  = path:Path ","? {
    return path;
  }

NamedTables
  = table:NamedTable joins:(JoinedTable)* {
    if (joins.length) {
      return { table: table, joins: joins };
    } else {
      return { table : table };
    }
  }

JoinedTable
  = join:Join table:NamedTable {
    return {
      join: join,
      table: table
    }
  }

Join
  = ("," / "=" / "|=" / "=|" / "|=|")

NamedTable
  = (name:Path ":")? table:Table {
    return {
      name: name,
      table: table
    }
  }

Table
  = (Path / "/")* { return text() }

Path
  = Word ("."? Word)* { return text(); }

Word
  = (Variable / Template)

Template
  = "{{" [^{] [^}]* "}}" { return text(); }

Variable
  = [a-zA-Z_$][0-9a-zA-Z_$]* { return text(); }

String
  = (SingleQuoteString / DoubleQuoteString)

DoubleQuoteString
  = "\"" [^\"]+ "\"" { return text(); }

SingleQuoteString
  = "'" [^']+ "'" { return text(); }

Number
  = [0-9]+ "."? [0-9]* { return parseFloat(text()); }
